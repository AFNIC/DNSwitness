This is the documentation of the DNSSEC module of DNSdelve. It is
intended to be read once you have a general knowledge of DNSdelve
(see README, USAGE and the man page).

******* Purpose and method *********

The aim of this module is to measure the introduction of DNSSEC under
a TLD. It does so by querying each zone about its DNSKEY record(s) and
also a NSEC (or NSEC3) record(s) for the zone itself. 

The reason we test both is that first surveys showed that, in a large
TLD, one third of zones with a DNSKEY records were not actually signed
(probably because system administrators put the DNSKEY in the zone
file, then either forget to run a signature program such as BIND's
dnssec-signzone, or forget to update named.conf to point to the
*signed* file).

We should of course test the RRSIG of the apex, not its NSEC, but a
bug in dnspython prevents it :-(

The results are stored in a PostgreSQL DBMS and can be queried later. 

******* Usage *************

The database must be created first. Here are the typical PostgreSQL
instructions for that:

createdb dnssec
psql -f dnssec-create.sql dnssec

To use the program:

dnsdelve [dnsdelve main program arguments] [-n N] [-b DB]

-n (or --num_tasks) is to set the number of threads that will write in
 the database. Its value influences only performance, not the
 results. There is no pressing need to use this option.

-b (or --database) is to set the name of the database you use. The
 default is "dnssec" (just the name of the database, but you can also
 provide a full PostgreSQL "conninfo" such as "host=db.example.org
 dbaname=mydatabase"). The datebase must have been created before and
 its schema defined with the script dnssec-create.sql.

-r (or --resolvers) is a comma-separated list of IP addresses of the
 resolver(s) to use. The default is the list indicated in
 /etc/resolv.conf.

Example, with a remote database and SSL access to PostgreSQL:

/dnsdelve -m Dnssec zone.db  -n 1 \
         -b 'host=db.example.net dbname=dnsdelve-dnssec user=dnswitness password=secret sslmode=require'

******** Retrieving results *********

The current schema of the database (see file dnssec-create.sql) uses
the general DNSdelve schema (see USAGE). The two dnssec-specific
columns are two booleans, "dnskey" and "nsec" (which includes
nsec3). A value of True means at least one record of this type was
present.

The keys themselves, and therefore information such as the exponent,
the expiration date, etc, are not stored currently (TODO).

An example of an interesting request is:

SELECT domain FROM Tests WHERE (dnskey AND nsec) ORDER BY domain;

to find all the domains which are really signed.

$Id: DNSSEC-README 8434 2009-04-14 12:33:02Z bortzmeyer $
